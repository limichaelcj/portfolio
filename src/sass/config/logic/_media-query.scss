
// All media query mixins are programmed to be
// mobile-first. smaller device widths will
// be given values at the smaller indexes of
// the user-defined ranges.

// The variable $rules must be a map with attributes
// corresponding to css attributes and values being
// lists of varying lengths depending on the mixin.
// - mediaQueryRange: 2
// - mediaQueryStep: 1 to 4
// - mediaQueryOrientation: 2

// Examples:
// @include mediaQueryRange((
//   width: (50%, 100%),
//   height: (80%, 100%)
// ));
// @include mediaQueryStep($delay: 1, $rules: (
//   width: (800px, 500px, 1000px),
//   text-align: ('left', 'right', 'center'),
// ));
// @include mediaQueryOrientation((
//   width: (100%, 50%),
//   opacity: (1, 0.7)
// ));

$device-breakpoints: 480px 600px 768px 992px 1200px;

// This mixin provides the base css rule.
// Rule values must be calculatable units.
@mixin mediaQueryRange($rules, $delay: 0) {
  $breaks: 4 - $delay;
  @each $attr, $range in $rules {
    #{$attr}: nth($range, 1);
  }
  @each $device in $device-breakpoints {
    $index: index($device-breakpoints, $device) - $delay;
    @if $index > 0 {
      @media only screen and (min-width: $device) {
        @each $attr, $range in $rules {
          $base: nth($range, 1);
          $final: nth($range, length($range));
          $delta: ($final - $base) / $breaks;
          #{$attr}: $base + ($delta * $index);
        }
      }
    }
  }
}

// This mixin does not provide the base css rule.
// Rule values will use last index if user-defined
// list is too short.
@mixin mediaQueryStep($rules, $delay: 0) {
  @each $device in $device-breakpoints {
    $index: index($device-breakpoints, $device) - $delay;
    @if $index > 0 {
      @media only screen and (min-width: $device){
        @each $attr, $values in $rules {
          @if $index > length($values) {
            #{$attr}: nth($values, length($values));
          } @else {
            #{$attr}: nth($values, $index);
          }
        }
      }
    }
  }
}

// Assumes mobile-first (portrait) and provides
// a media query for landscape orientation.
@mixin mediaQueryOrientation($rules){
  @each $attr, $values in $rules {
    #{$attr}: nth($values, 1);
  }
  @media only screen and (orientation: landscape) {
    @each $attr, $values in $rules {
      #{$attr}: nth($values, 2);
    }
  }
}
